-- Script was generated by Devart dbForge Studio for MySQL, Version 6.0.151.0
-- Product home page: http://www.devart.com/dbforge/mysql/studio
-- Script date 08.09.2017 14:29:06
-- Server version: 5.6.17
-- Client version: 4.1

-- 
-- Disable foreign keys
-- 
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;

-- 
-- Set character set the client will use to send SQL statements to the server
--
SET NAMES 'utf8';

-- 
-- Set default database
--
USE `snr-mondb`;

--
-- Definition for table alerts
--
DROP TABLE IF EXISTS alerts;
CREATE TABLE alerts (
  alert_id INT(11) NOT NULL AUTO_INCREMENT COMMENT 'Идентификатор извещения',
  display_name VARCHAR(50) DEFAULT NULL COMMENT 'Отображаемое имя',
  description VARCHAR(500) DEFAULT NULL COMMENT 'Описание события',
  wanted_state INT(11) DEFAULT NULL COMMENT 'Ожидаемое состояние',
  wanted_state_delay INT(11) DEFAULT NULL COMMENT 'Время пребывания в ожидаемом состоянии',
  wanted_state_change_count INT(11) DEFAULT NULL COMMENT 'Ожидаемое число изменений состояний',
  wanted_state_change_perion INT(11) DEFAULT NULL COMMENT 'Период вычисления количества изменений состояния',
  action VARCHAR(255) DEFAULT NULL COMMENT 'Действие',
  action_params TEXT DEFAULT NULL COMMENT 'Параметры действия',
  alert_title VARCHAR(255) DEFAULT NULL COMMENT 'Заголовок извещения',
  alert_body TEXT DEFAULT NULL COMMENT 'Текст извещения',
  repeat_interval INT(11) DEFAULT NULL COMMENT 'Повторять сообщение через интервал (минут)',
  alert_type INT(11) NOT NULL DEFAULT 0 COMMENT 'Тип события',
  PRIMARY KEY (alert_id)
)
ENGINE = INNODB
AUTO_INCREMENT = 14
AVG_ROW_LENGTH = 3276
CHARACTER SET utf8
COLLATE utf8_general_ci
COMMENT = 'Таблица с параметрами извещений';

--
-- Definition for table alerts_log
--
DROP TABLE IF EXISTS alerts_log;
CREATE TABLE alerts_log (
  alert_log_id INT(11) NOT NULL AUTO_INCREMENT COMMENT 'Идентификатор извещения',
  device_id INT(11) NOT NULL COMMENT 'Идентификатор устройства',
  sensor_id INT(11) NOT NULL COMMENT 'Идентификатор сенсора',
  alert_id INT(11) DEFAULT NULL COMMENT 'Идентификатор события',
  title VARCHAR(255) DEFAULT NULL COMMENT 'Заголовок',
  body TEXT DEFAULT NULL COMMENT 'Текст извещения',
  action VARCHAR(255) DEFAULT NULL COMMENT 'Действие',
  params TEXT DEFAULT NULL COMMENT 'Параметры извещения',
  changed TIMESTAMP NULL DEFAULT CURRENT_TIMESTAMP COMMENT 'Время добавления события',
  alert_type INT(11) DEFAULT 0 COMMENT 'Тип события',
  PRIMARY KEY (alert_log_id)
)
ENGINE = INNODB
AUTO_INCREMENT = 1008
AVG_ROW_LENGTH = 622
CHARACTER SET utf8
COLLATE utf8_general_ci;

--
-- Definition for table alerts_sended
--
DROP TABLE IF EXISTS alerts_sended;
CREATE TABLE alerts_sended (
  alert_id INT(11) NOT NULL DEFAULT 0 COMMENT 'Идентификатор извещения',
  sensor_id INT(11) NOT NULL DEFAULT 0 COMMENT 'Идентификатор сенсора',
  expire TIMESTAMP NULL DEFAULT NULL COMMENT 'Время удаления записи',
  is_stable_alert TINYINT(1) DEFAULT NULL,
  PRIMARY KEY (alert_id, sensor_id)
)
ENGINE = INNODB
AVG_ROW_LENGTH = 780
CHARACTER SET utf8
COLLATE utf8_general_ci
COMMENT = 'Список отработавших извещений';

--
-- Definition for table config
--
DROP TABLE IF EXISTS config;
CREATE TABLE config (
  name VARCHAR(50) NOT NULL,
  value VARCHAR(255) DEFAULT NULL,
  PRIMARY KEY (name)
)
ENGINE = INNODB
CHARACTER SET utf8
COLLATE utf8_general_ci;

--
-- Definition for table deamon_work_log
--
DROP TABLE IF EXISTS deamon_work_log;
CREATE TABLE deamon_work_log (
  event_id INT(11) NOT NULL AUTO_INCREMENT COMMENT 'Идентификатор события',
  started TIMESTAMP NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT 'Запущен',
  stoped TIMESTAMP NULL DEFAULT '0000-00-00 00:00:00' COMMENT 'Остановлен',
  PRIMARY KEY (event_id)
)
ENGINE = INNODB
AUTO_INCREMENT = 9
AVG_ROW_LENGTH = 4096
CHARACTER SET utf8
COLLATE utf8_general_ci
COMMENT = 'Лог перезапуска службы';

--
-- Definition for table devices
--
DROP TABLE IF EXISTS devices;
CREATE TABLE devices (
  device_id INT(11) NOT NULL AUTO_INCREMENT COMMENT 'Идентификатор устройства',
  device_model VARCHAR(50) DEFAULT NULL COMMENT 'Модель устройства (для определения классов датчиков)',
  display_name VARCHAR(250) DEFAULT NULL COMMENT 'Отображаемое имя',
  description VARCHAR(255) DEFAULT NULL COMMENT 'Описание',
  organization VARCHAR(255) DEFAULT NULL COMMENT 'Организация',
  location VARCHAR(255) DEFAULT NULL COMMENT 'Размещение',
  snmp_username VARCHAR(255) NOT NULL COMMENT 'Имя пользователя SNMP',
  snmp_password VARCHAR(255) NOT NULL COMMENT 'Пароль SNMP',
  snmp_comunity VARCHAR(255) NOT NULL DEFAULT 'public' COMMENT 'Comunity SNMP',
  snmp_host VARCHAR(255) NOT NULL COMMENT 'Хост',
  snmp_port INT(11) NOT NULL DEFAULT 161 COMMENT 'Порт',
  contact_id INT(11) DEFAULT NULL COMMENT 'Контактное лицо',
  PRIMARY KEY (device_id),
  INDEX IDX_devices_snmp_host (snmp_host),
  UNIQUE INDEX UK_devices_device_id (device_id)
)
ENGINE = INNODB
AUTO_INCREMENT = 7
AVG_ROW_LENGTH = 3276
CHARACTER SET utf8
COLLATE utf8_general_ci
COMMENT = 'Устройства';

--
-- Definition for table roles
--
DROP TABLE IF EXISTS roles;
CREATE TABLE roles (
  role VARCHAR(255) NOT NULL DEFAULT '' COMMENT 'Идентификатор роли',
  dname VARCHAR(255) DEFAULT NULL COMMENT 'Отображаемое имя',
  description VARCHAR(500) DEFAULT NULL COMMENT 'Описание',
  PRIMARY KEY (role)
)
ENGINE = INNODB
AVG_ROW_LENGTH = 5461
CHARACTER SET utf8
COLLATE utf8_general_ci
COMMENT = 'Описание ролей в системе';

--
-- Definition for table sensors
--
DROP TABLE IF EXISTS sensors;
CREATE TABLE sensors (
  sensor_id INT(11) NOT NULL AUTO_INCREMENT COMMENT 'Идентификатор',
  class_id INT(11) NOT NULL DEFAULT 0 COMMENT 'Идентификатор класса датчика',
  device_id INT(11) NOT NULL DEFAULT 0 COMMENT 'Идентификатор устройства',
  display_name VARCHAR(50) DEFAULT NULL COMMENT 'Отображаемое имя',
  enablied TINYINT(1) DEFAULT 1 COMMENT 'Вкл/выкл опроса сенсора',
  value VARCHAR(255) DEFAULT NULL COMMENT 'Значение',
  value_coof DOUBLE DEFAULT 1 COMMENT 'Коофициент',
  int_value DOUBLE DEFAULT NULL COMMENT 'Текущее значение в виде числа',
  state INT(11) DEFAULT -1 COMMENT 'Состояние датчика и значения',
  last_error VARCHAR(500) DEFAULT NULL COMMENT 'Последнее сообщение о ошибке',
  value_change_sig INT(11) DEFAULT 0 COMMENT 'Напрвление изменения значения',
  changed TIMESTAMP NULL DEFAULT CURRENT_TIMESTAMP COMMENT 'Время последнего изменения данных',
  state_changed TIMESTAMP NULL DEFAULT '1983-12-09 00:00:00' COMMENT 'Время последнего изменения состояния',
  last_check TIMESTAMP NULL DEFAULT '1983-12-09 00:00:00' COMMENT 'Время последнего опроса',
  value_changed TIMESTAMP NULL DEFAULT '1983-12-09 00:00:00' COMMENT 'Время последней попытки получения данных',
  store_history TINYINT(1) DEFAULT 0 COMMENT 'Хранить историю изменений',
  allow_chart TINYINT(1) DEFAULT 0 COMMENT 'Для значения возможно построение графика',
  check_interval INT(11) DEFAULT 1 COMMENT 'Минимальный интервал обновления значения в секундах',
  last_check_duration INT(11) NOT NULL DEFAULT 0 COMMENT 'Продолжительность последней операции обновления',
  force_update TINYINT(1) DEFAULT 0 COMMENT 'Принудительное обновление',
  ubdate_on_get_trap TINYINT(1) DEFAULT 1 COMMENT 'Принудительное обновление при приходе trap',
  max_retry_count INT(11) DEFAULT -1 COMMENT 'Максимальное число попыток опроса датчика',
  timeout INT(11) DEFAULT NULL COMMENT 'Таймаут опроса',
  in_work TINYINT(1) NOT NULL DEFAULT 0 COMMENT 'Флаг нахождения элемента в работе',
  signaled_check_interval INT(11) DEFAULT -1 COMMENT 'Интервал обновления для "сигнального" состояния',
  stable_state INT(11) DEFAULT -1 COMMENT '"Стабильное" состояние датчика',
  stable_timeout INT(11) DEFAULT -1 COMMENT 'Тамаут стабилизации датчика',
  signaled_error VARCHAR(255) DEFAULT NULL COMMENT 'Сообщение об ошибке в сигнальном состоянии',
  exp_vars VARCHAR(500) DEFAULT NULL COMMENT 'Значения переменных для вычисления значений',
  PRIMARY KEY (class_id, device_id),
  INDEX IDX_sensors_device_id (device_id),
  INDEX IDX_sensors_last_check (last_check),
  UNIQUE INDEX sensor_id (sensor_id)
)
ENGINE = INNODB
AUTO_INCREMENT = 248
AVG_ROW_LENGTH = 1092
CHARACTER SET utf8
COLLATE utf8_general_ci
COMMENT = 'Параметры опрашиваемых значений и их текущее состояние';

--
-- Definition for table sensors_alerts
--
DROP TABLE IF EXISTS sensors_alerts;
CREATE TABLE sensors_alerts (
  sensor_id INT(11) DEFAULT NULL COMMENT 'Идентификатор сенсора',
  alert_id INT(11) DEFAULT NULL COMMENT 'Идентификатор события'
)
ENGINE = INNODB
AVG_ROW_LENGTH = 364
CHARACTER SET utf8
COLLATE utf8_general_ci
COMMENT = 'Извещения привязанные к сенсору';

--
-- Definition for table sensors_classes
--
DROP TABLE IF EXISTS sensors_classes;
CREATE TABLE sensors_classes (
  class_id INT(11) NOT NULL AUTO_INCREMENT COMMENT 'Идентификатор',
  device_model VARCHAR(255) NOT NULL COMMENT 'Модель устройства',
  sensor_class VARCHAR(255) NOT NULL COMMENT 'Тип сенсора',
  description VARCHAR(500) NOT NULL COMMENT 'Описание',
  snmp_version INT(11) NOT NULL DEFAULT 0 COMMENT 'Версия протокола',
  snmp_oid VARCHAR(255) NOT NULL COMMENT 'SNMP OID значения',
  snmp_V3Flags INT(11) NOT NULL DEFAULT 0 COMMENT 'Флаги для протокола SNMPv3',
  snmp_V3Auth INT(11) NOT NULL DEFAULT 0 COMMENT 'Тип аутентификации для протокола SNMPv3',
  snmp_datatype INT(11) NOT NULL DEFAULT 0 COMMENT 'Тип данных для значения',
  changed TIMESTAMP NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT 'Время последнего изменения данных',
  state_expr VARCHAR(500) NOT NULL COMMENT 'Выражение для определения состояния сигнализировано/нет',
  value_expr VARCHAR(500) NOT NULL COMMENT 'Выражение для определения значения',
  value_int_expr VARCHAR(500) NOT NULL COMMENT 'Выражение для определения значения для графика double',
  allow_chart TINYINT(1) NOT NULL DEFAULT 0 COMMENT 'Для значения возможно построение графика',
  value_pt VARCHAR(255) NOT NULL COMMENT 'Единица измерения значения',
  error_int_value DOUBLE NOT NULL DEFAULT 0 COMMENT 'Значение для состояния ошибки, неизвестного не в сети (для графиков)',
  check_interval INT(11) NOT NULL DEFAULT 1 COMMENT 'Минимальный интервал обновления значения в секундах',
  max_retry_count INT(11) DEFAULT 3 COMMENT 'Максимальное число попыток получения данных',
  timeout INT(11) DEFAULT 2000 COMMENT 'Таймаут получения значения (милисекунд)',
  signaled_error VARCHAR(255) DEFAULT NULL COMMENT 'Описание "сигнального" состояния',
  stable_timeout INT(11) NOT NULL DEFAULT -1 COMMENT 'Тамаут стабилизации значения',
  exp_vars_desc VARCHAR(500) DEFAULT NULL COMMENT 'Переменные для вычисления значения - описание',
  exp_vars_def VARCHAR(500) DEFAULT NULL COMMENT 'Значения по умолчанию для переменных',
  PRIMARY KEY (snmp_oid, device_model),
  UNIQUE INDEX class_id (class_id)
)
ENGINE = INNODB
AUTO_INCREMENT = 5
AVG_ROW_LENGTH = 4096
CHARACTER SET utf8
COLLATE utf8_general_ci
COMMENT = 'Параметры датчиков';

--
-- Definition for table sensors_history
--
DROP TABLE IF EXISTS sensors_history;
CREATE TABLE sensors_history (
  id INT(11) NOT NULL AUTO_INCREMENT COMMENT 'Идентификатор события',
  changed TIMESTAMP NULL DEFAULT CURRENT_TIMESTAMP COMMENT 'Время события',
  sensor_id INT(11) NOT NULL COMMENT 'Идентификатор сенсора',
  device_id INT(11) DEFAULT NULL COMMENT 'Идентификатор устройства',
  int_value DOUBLE NOT NULL COMMENT 'Значение для графика',
  value VARCHAR(255) DEFAULT NULL COMMENT 'Значение',
  state INT(11) DEFAULT NULL COMMENT 'Состояние',
  PRIMARY KEY (id),
  INDEX IDX_sensors_history_changed (changed),
  INDEX IDX_sensors_history_sensor_id (sensor_id)
)
ENGINE = INNODB
AUTO_INCREMENT = 142196
AVG_ROW_LENGTH = 106
CHARACTER SET utf8
COLLATE utf8_general_ci
COMMENT = 'История изменения значений сенсоров';

--
-- Definition for table servers
--
DROP TABLE IF EXISTS servers;
CREATE TABLE servers (
  server_id INT(11) DEFAULT NULL COMMENT 'Идентификатор сервера',
  dname VARCHAR(50) DEFAULT NULL COMMENT 'Отображаемое имя',
  host VARCHAR(255) DEFAULT NULL COMMENT 'Хост',
  dbname VARCHAR(255) DEFAULT NULL COMMENT 'Имя базы данных',
  login VARCHAR(255) DEFAULT NULL COMMENT 'Логин',
  password VARCHAR(255) DEFAULT NULL COMMENT 'Пароль'
)
ENGINE = INNODB
CHARACTER SET utf8
COLLATE utf8_general_ci;

--
-- Definition for table state_change_counters
--
DROP TABLE IF EXISTS state_change_counters;
CREATE TABLE state_change_counters (
  counter_id INT(11) NOT NULL AUTO_INCREMENT,
  sensor_id INT(11) NOT NULL COMMENT 'Идентификатор сенсора',
  changed TIMESTAMP NULL DEFAULT CURRENT_TIMESTAMP COMMENT 'Время изиенения состояния',
  state INT(11) DEFAULT NULL COMMENT 'Состояние',
  PRIMARY KEY (counter_id)
)
ENGINE = MEMORY
AUTO_INCREMENT = 1
AVG_ROW_LENGTH = 17
CHARACTER SET utf8
COLLATE utf8_general_ci
COMMENT = 'Счетчик числа изменений состояний датчиков';

--
-- Definition for table state_log
--
DROP TABLE IF EXISTS state_log;
CREATE TABLE state_log (
  log_id INT(11) NOT NULL AUTO_INCREMENT COMMENT 'Идентификатор события',
  sensor_id INT(11) DEFAULT NULL COMMENT 'Идентификатор сенсора',
  device_id INT(11) DEFAULT NULL COMMENT 'Идентификатор устройства',
  old_state INT(11) DEFAULT NULL COMMENT '"Старое" состояние',
  new_state INT(11) DEFAULT NULL COMMENT 'Новое состояние',
  changed TIMESTAMP NULL DEFAULT CURRENT_TIMESTAMP COMMENT 'Время поступления события',
  old_value VARCHAR(255) DEFAULT NULL COMMENT '"Старое" значение',
  new_value VARCHAR(255) DEFAULT NULL COMMENT 'Новое значение',
  error VARCHAR(500) DEFAULT NULL COMMENT 'Ошибка',
  handled TINYINT(1) NOT NULL DEFAULT 0 COMMENT 'Событие обработано',
  PRIMARY KEY (log_id)
)
ENGINE = INNODB
AUTO_INCREMENT = 5138
AVG_ROW_LENGTH = 92
CHARACTER SET utf8
COLLATE utf8_general_ci
COMMENT = 'Лог изменения состояний сенсоров';

--
-- Definition for table trap_log
--
DROP TABLE IF EXISTS trap_log;
CREATE TABLE trap_log (
  changed DATETIME NOT NULL DEFAULT '0000-00-00 00:00:00' COMMENT 'Дата поступления события',
  host VARCHAR(255) NOT NULL DEFAULT '' COMMENT 'Хост',
  oid VARCHAR(255) NOT NULL DEFAULT '' COMMENT 'SNMP OID',
  value VARCHAR(255) DEFAULT NULL COMMENT 'Переданное значение',
  cnt INT(11) NOT NULL DEFAULT 1 COMMENT 'Число повторов за минуту',
  PRIMARY KEY (changed, host, oid)
)
ENGINE = INNODB
AVG_ROW_LENGTH = 127
CHARACTER SET utf8
COLLATE utf8_general_ci
COMMENT = 'Лог приема snmp trap';

--
-- Definition for table user_roles
--
DROP TABLE IF EXISTS user_roles;
CREATE TABLE user_roles (
  user_id INT(11) NOT NULL COMMENT 'Идентификатор пользователя',
  role VARCHAR(50) NOT NULL COMMENT 'Роль',
  PRIMARY KEY (user_id, role)
)
ENGINE = INNODB
AVG_ROW_LENGTH = 5461
CHARACTER SET utf8
COLLATE utf8_general_ci
COMMENT = 'Роли пользователей в системе';

--
-- Definition for table users
--
DROP TABLE IF EXISTS users;
CREATE TABLE users (
  user_id INT(11) NOT NULL AUTO_INCREMENT COMMENT 'Идентификатор пользователя',
  dname VARCHAR(255) DEFAULT NULL COMMENT 'Отображаемое имя',
  title VARCHAR(255) DEFAULT NULL COMMENT 'Должность',
  login VARCHAR(255) NOT NULL COMMENT 'Логин',
  pass VARCHAR(255) NOT NULL COMMENT 'Пароль',
  blocked TINYINT(1) NOT NULL DEFAULT 0 COMMENT 'Заблокирован',
  created TIMESTAMP NULL DEFAULT '0000-00-00 00:00:00' COMMENT 'Дата создания учетной записи',
  changed TIMESTAMP NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT 'Последнее изменение данных',
  PRIMARY KEY (user_id)
)
ENGINE = INNODB
AUTO_INCREMENT = 14
AVG_ROW_LENGTH = 16384
CHARACTER SET utf8
COLLATE utf8_general_ci
COMMENT = 'Пользователи системы';

DELIMITER $$

--
-- Definition for function lastdevicealerts
--
DROP FUNCTION IF EXISTS lastdevicealerts$$
CREATE DEFINER = 'root'@'localhost'
FUNCTION lastdevicealerts(devid INT)
  RETURNS varchar(500) CHARSET utf8
BEGIN
  SET @sensors_ids = (SELECT GROUP_CONCAT(sensor_id) FROM sensors WHERE device_id = devid);
  SET @result = (SELECT 
                  GROUP_CONCAT(CONCAT(DATE_FORMAT(tbl.changed, "%d.%m.%Y %H:%i")," - ", title) ORDER BY changed DESC SEPARATOR "@#") 
                 FROM 
                   (SELECT * FROM alerts_log WHERE sensor_id IN (@sensors_ids) ORDER BY CHANGED DESC LIMIT 20) tbl
                 );
RETURN @result;
END
$$

--
-- Definition for function state_change_cnt
--
DROP FUNCTION IF EXISTS state_change_cnt$$
CREATE DEFINER = 'root'@'localhost'
FUNCTION state_change_cnt(asensor_id INT, duration INT)
  RETURNS int(11)
  COMMENT 'Возвращает число изменений состояний сенсора за промежуток времени duration'
BEGIN
 SET @ares = (SELECT COUNT(sensor_id) FROM state_change_counters scc WHERE (sensor_id = asensor_id) AND (DATE_ADD(changed, INTERVAL duration SECOND) >= CURRENT_TIMESTAMP));
RETURN IF(ISNULL(@ares), 0, @ares);
END
$$

--
-- Definition for event state_change_counters_truncate
--
DROP EVENT IF EXISTS state_change_counters_truncate$$
CREATE 
	DEFINER = 'root'@'localhost'
EVENT state_change_counters_truncate
	ON SCHEDULE EVERY '1' MINUTE
	STARTS '2000-06-24 09:16:27'
	COMMENT 'Поддержание состояния таблици с счетчиками в актуальном состояни'
	DO 
BEGIN
  DELETE FROM state_change_counters WHERE DATE_ADD(changed, INTERVAL 1 HOUR) < CURRENT_TIMESTAMP;
  DELETE FROM alert_sended WHERE not ISNULL(expire) AND (expire <= CURRENT_TIMESTAMP);
END
$$

DELIMITER ;

DELIMITER $$

--
-- Definition for trigger OnAddAlert
--
DROP TRIGGER IF EXISTS OnAddAlert$$
CREATE 
	DEFINER = 'root'@'localhost'
TRIGGER OnAddAlert
	AFTER INSERT
	ON alerts_log
	FOR EACH ROW
BEGIN
  SET @expire = (SELECT IF(wanted_state <= -5, DATE_ADD(CURRENT_TIMESTAMP, INTERVAL 30 MINUTE), IF(repeat_interval = 0, NULL, DATE_ADD(CURRENT_TIMESTAMP, INTERVAL repeat_interval MINUTE))) FROM alerts WHERE alert_id = new.alert_id LIMIT 1);
  SET @stab = (SELECT IF(wanted_state <= -5, 1, 0) FROM alerts WHERE alert_id = new.alert_id LIMIT 1);
  DELETE FROM alerts_sended WHERE ((sensor_id = new.sensor_id) AND not is_stable_alert);
  INSERT INTO alerts_sended (alert_id, sensor_id, expire, is_stable_alert) VALUES (new.alert_id, new.sensor_id, @expire, @stab) ON DUPLICATE KEY UPDATE expire = @expire, is_stable_alert = @stab;
END
$$

--
-- Definition for trigger OnBeforeAddAlert
--
DROP TRIGGER IF EXISTS OnBeforeAddAlert$$
CREATE 
	DEFINER = 'root'@'localhost'
TRIGGER OnBeforeAddAlert
	BEFORE INSERT
	ON alerts_log
	FOR EACH ROW
BEGIN
  SET new.alert_type = (SELECT alert_type FROM alerts WHERE alert_id = new.alert_id LIMIT 1);
END
$$

--
-- Definition for trigger OnDeviceDelete
--
DROP TRIGGER IF EXISTS OnDeviceDelete$$
CREATE 
	DEFINER = 'root'@'localhost'
TRIGGER OnDeviceDelete
	AFTER DELETE
	ON devices
	FOR EACH ROW
BEGIN
  DELETE FROM sensors WHERE device_id = old.device_id;
END
$$

--
-- Definition for trigger OnDeviceUpdate
--
DROP TRIGGER IF EXISTS OnDeviceUpdate$$
CREATE 
	DEFINER = 'root'@'localhost'
TRIGGER OnDeviceUpdate
	AFTER UPDATE
	ON devices
	FOR EACH ROW
BEGIN
  UPDATE sensors SET force_update = 1 WHERE device_id = old.device_id;
END
$$

--
-- Definition for trigger OnSensorDelete
--
DROP TRIGGER IF EXISTS OnSensorDelete$$
CREATE 
	DEFINER = 'root'@'localhost'
TRIGGER OnSensorDelete
	AFTER DELETE
	ON sensors
	FOR EACH ROW
BEGIN
  DELETE FROM sensors_history WHERE sensor_id = old.sensor_id;
END
$$

--
-- Definition for trigger OnSensorUpdate
--
DROP TRIGGER IF EXISTS OnSensorUpdate$$
CREATE 
	DEFINER = 'root'@'localhost'
TRIGGER OnSensorUpdate
	BEFORE UPDATE
	ON sensors
	FOR EACH ROW
BEGIN
  # При изменении состояния
  SET new.changed = CURRENT_TIMESTAMP;
  IF (new.state <> old.state) THEN    
    IF (new.state = -1) THEN # Обновление значениий при запуске приложения
      SET new.value = '';
      SET new.in_work = 0;
      SET new.int_value = (SELECT error_int_value FROM sensors_classes WHERE class_id = new.class_id LIMIT 1);
      IF new.store_history = 1 THEN
        INSERT INTO sensors_history (changed, sensor_id, device_id, value, int_value, state) VALUES (DATE_ADD(old.last_check, interval 1 second), new.sensor_id, new.device_id, new.value, new.int_value, new.state);
      END IF;  
    END IF;   
    SET new.state_changed = CURRENT_TIMESTAMP;    
  END IF;
  # Обработка сигнального состояния - получение его описания из спец поля или из класса
  IF (new.state = 1) THEN
      SET new.last_error = REPLACE(REPLACE(IF(ISNULL(new.signaled_error) OR (TRIM(new.signaled_error) = ''), 
        (SELECT sensors_classes.signaled_error FROM sensors_classes WHERE sensors_classes.class_id = new.class_id LIMIT 1), new.signaled_error), '%old%', old.value), '%new%', new.value);
  END IF;
  # Обработка таймаута стабилизации "сигнального" состояния
  SET new.stable_state = IF((old.state < 0) OR (new.state < 0) OR (new.stable_timeout < 0) OR (DATE_ADD(new.state_changed, interval new.stable_timeout second) < CURRENT_TIMESTAMP), new.state, old.stable_state);
  if (old.stable_state <> new.stable_state) THEN # Добавление события
    INSERT INTO state_log (changed, sensor_id, device_id, old_state, new_state, old_value, new_value, error) VALUES (IF(new.state = -1, DATE_ADD(old.last_check, interval 1 second), CURRENT_TIMESTAMP), new.sensor_id, new.device_id, old.stable_state, new.stable_state, old.value, new.value, IF(new.state = -1,'', new.last_error));    
    IF (new.state <> -1) AND (old.state <> -1) THEN # Предотвращение отправки сообщений 
      INSERT INTO state_change_counters (sensor_id, state, changed) VALUES (old.sensor_id, new.stable_state, CURRENT_TIMESTAMP); # Обновление счетчиков
      #DELETE FROM alerts_sended WHERE ((sensor_id = old.sensor_id) AND not is_stable_alert);
    END IF;
  END IF;

  # При изменении значения параметра
  IF (new.value <> old.value) OR (new.int_value <> old.int_value) THEN
    SET new.value_changed = CURRENT_TIMESTAMP;
    IF new.store_history = 1 THEN
      INSERT INTO sensors_history (changed, sensor_id, device_id, value, int_value, state) VALUES (new.value_changed, new.sensor_id, new.device_id, new.value, new.int_value, new.state);
    END IF;     
  END IF; 
END
$$

--
-- Definition for trigger OnInsertTrap
--
DROP TRIGGER IF EXISTS OnInsertTrap$$
CREATE 
	DEFINER = 'root'@'localhost'
TRIGGER OnInsertTrap
	BEFORE INSERT
	ON trap_log
	FOR EACH ROW
BEGIN
  UPDATE sensors SET force_update = 1 where device_id in 
    (select device_id from devices where snmp_host = new.host);
END
$$

--
-- Definition for trigger OnUpdateTrap
--
DROP TRIGGER IF EXISTS OnUpdateTrap$$
CREATE 
	DEFINER = 'root'@'localhost'
TRIGGER OnUpdateTrap
	AFTER INSERT
	ON trap_log
	FOR EACH ROW
BEGIN
  UPDATE sensors SET force_update = 1 where device_id in 
    (select device_id from devices where snmp_host = new.host); 
END
$$

DELIMITER ;

-- 
-- Enable foreign keys
-- 
/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */;